产品需求文档 (PRD): AI命理教练

版本： 1.0
日期： 2025年5月22日 (根据当前日期)
项目负责人： 归淮

1. 引言 (Introduction)

1.1 项目使命 (Mission): 赋能每一位用户，让他们通过易于理解的八字命理分析，成为自己的个人成长教练，更好地认识自我，发掘潜能。我们的核心理念是：“每个人都是自己最好的命理师，做自己的教练。”
1.2 产品目标 (Goals):
为用户提供一个便捷、友好的在线工具，通过输入生日信息即可获得个性化的AI八字分析报告。
确保分析报告内容结构清晰（命盘概览、十神探索、赋能行动），富有启发性。
实现产品的基本功能并成功上线，作为项目成功的第一步。
1.3 目标用户 (Target Audience):
主要面向对自我探索和个人成长感兴趣的年轻人。
希望通过八字命理这一传统智慧视角来深入了解自身性格、潜能和人生方向的用户。
用户可能对八字命理不具备深厚背景知识，因此产品需注重易用性和内容的易理解性。
1.4 独特卖点 (Unique Selling Proposition - USP):
易用性： 简洁直观的操作界面，用户无需复杂的命理知识即可轻松上手，快速获得分析报告。
1.5 成功标准 (Success Metrics - MVP):
产品核心功能（用户输入生日、AI生成三段式报告、报告展示）完整实现并成功部署上线。
2. 产品概述 (Product Overview)

2.1 产品描述: “AI命理教练”是一个Web应用程序，用户通过选择公历生日和时辰，即可获得一份由AI生成的个性化八字分析报告。报告包含“八字命盘概览”、“十神深度探索”和“赋能行动手册”三部分，旨在帮助用户理解自己的命理特征，并为个人发展提供积极指引。
2.2 系统架构概述 (Simplified):
前端 (Frontend): 用户交互界面，负责采集用户输入、展示报告、处理用户操作。
八字计算服务 (Minimal Backend): 接收前端传来的生日信息，使用 bazi.py 开源库进行八字排盘（计算四柱、十神等），并将结构化的八字数据返回给前端或直接用于后续AI调用。
NewAPI 服务 (API Gateway): 作为项目所有者管理的API网关，用于代理对Flowith API（或其底层LLM）的调用。它负责管理API凭证和可能的调用成本/额度（由项目所有者配置和承担）。
Flowith API (AI & Knowledge Base): 接收包含八字数据和预设提示词的请求，结合项目所有者提供的知识库，生成三段式的八字分析内容。
2.3 用户场景举例 (User Scenario Example): 小明（一位25岁的年轻人）对自己的职业发展感到迷茫，听说八字可以帮助了解自己的优势。他打开“AI命理教练”网站，选择了自己的出生年月日和时辰，点击“生成报告”。几分钟后，他收到了一份详细的报告，其中“十神深度探索”让他了解了自己的主要性格特质和天赋，“赋能行动手册”则为他提供了一些职业方向和个人成长的建议。他将报告中的关键信息复制下来，并开始思考如何将这些建议融入自己的规划中。
3. 功能需求 (Functional Requirements)

3.1 用户输入模块 (Frontend):
FR1.1 生日选择:
用户应能通过下拉菜单选择公历的年、月、日。
年份范围应进行合理验证（例如，1900年至今）。
月份和日期应根据所选年份和月份进行联动验证（例如，正确的天数）。
FR1.2 时辰选择:
用户应能通过下拉菜单选择中国传统的十二时辰（子、丑、寅...亥）。
每个时辰选项旁边应清晰标注其对应的24小时制时间范围（例如：子时 (23:00-00:59)）。
产品MVP阶段不区分早子时和晚子时。
FR1.3 输入验证:
系统需对用户选择的日期和时辰组合进行有效性验证。
若输入无效，应在前端给出明确提示。
FR1.4 提交操作:
用户完成选择后，应有明确的“生成报告”或类似功能的按钮。
3.2 八字计算模块 (Minimal Backend using bazi.py):
FR2.1 接收输入: 服务应能接收前端传递的标准化生日时间信息。
FR2.2 八字排盘: 使用 bazi.py 库准确计算用户的四柱（年柱、月柱、日柱、时柱）的天干地支。
FR2.3 十神计算: 根据排盘结果计算出相应的十神关系。
FR2.4 数据输出: 将结构化的八字数据（如四柱干支、十神等）准备好，以供后续AI分析调用。
注：此结构化数据可以返回给前端，由前端再组织调用NewAPI；或者由该后端服务直接组织并调用NewAPI。鉴于后端越简单越好且要管理API Key，建议此后端服务负责调用NewAPI。
3.3 AI报告生成模块 (Interaction with NewAPI & Flowith API):
FR3.1 提示词构建: 系统（前端或后端）需根据用户的八字数据和预设的提示词模板，为三个报告板块（八字命盘概览、十神深度探索、赋能行动手册）分别构建有效的API请求。
用户已确认：个性化与内容深度由提示词约束。
FR3.2 NewAPI调用:
系统将构建好的请求发送至项目所有者配置的NewAPI服务。
NewAPI服务代理此请求至Flowith API。
此调用过程中的API Key由项目所有者管理，无需终端用户提供。
FR3.3 Flowith API处理: Flowith API根据接收到的提示词和八字信息，并利用其关联的知识库，生成分析内容。
FR3.4 接收AI回复: 系统接收Flowith API通过NewAPI返回的AI生成的文本内容。
3.4 报告展示模块 (Frontend):
FR4.1 加载状态:
用户提交信息后，在报告生成期间，前端应显示加载动画。
可考虑在加载期间展示预设的静态内容，如“温馨提示：命理工具旨在启发思考，请理性看待分析结果，命运掌握在自己手中。”等引导性文字。
FR4.2 报告结构:
生成的报告应在一个长可滚动页面上按顺序展示以下三个板块：
第一部分：八字命盘概览
第二部分：十神深度探索
第三部分：赋能行动手册
每个板块应有清晰的标题。
FR4.3 内容呈现: 报告内容应以易于阅读的方式呈现（合适的字体、字号、行间距）。
FR4.4 报告操作:
复制文本: 用户应能方便地复制报告的全部或部分文本内容。
生成图片 (可选): 提供将报告内容（或选定部分）生成为图片下载的功能。
导出PDF (理想): 提供将完整报告导出为PDF文档的功能。
MVP阶段：优先实现“复制文本”。若资源允许，再考虑图片或PDF。
3.5 错误处理模块 (Frontend & Backend):
FR5.1 输入验证错误: 在前端清晰提示用户输入错误的原因。
FR5.2 八字计算错误: 若后端排盘失败，前端应显示通用错误提示，如“无法处理您的请求，请稍后再试或检查输入信息。”
FR5.3 AI调用错误: 若调用NewAPI/Flowith API失败（如网络问题、API限流、内容生成失败等），前端应显示相应的错误提示，如“报告生成失败，请稍后再试。”
4. 非功能性需求 (Non-Functional Requirements)

4.1 性能 (Performance):
用户从提交生日信息到看到完整报告的平均等待时间应争取在5分钟以内。
4.2 易用性 (Usability):
界面设计简洁直观，用户无需引导即可完成操作。
报告内容语言通俗易懂，避免过多生僻专业术语，或对必要术语提供简要解释。
4.3 可用性 (Availability):
系统应能稳定运行，提供持续的服务。
4.4 数据隐私 (Data Privacy):
NFR4.1 无数据存储: 系统不应在服务器端或任何持久化存储中记录用户的生日信息或生成的报告内容。所有处理均为即时性。
NFR4.2 隐私声明: 网站应提供清晰的隐私政策声明，告知用户数据不被存储。
4.5 安全性 (Security):
虽然不存储用户数据，但与NewAPI/Flowith API交互的API Key（由项目所有者管理）不应暴露在前端客户端代码中，应由后端服务安全管理和调用。
4.6 本地化 (Localization):
MVP阶段，产品界面及报告内容仅支持简体中文。
5. MVP范围 (Minimum Viable Product Scope)

5.1 核心功能:
用户能通过下拉菜单选择公历年月日和十二时辰。
系统能根据用户输入，调用 bazi.py 完成八字排盘。
系统能调用NewAPI及Flowith API，根据八字数据和预设提示词，生成包含以下三个标准板块的分析报告：
八字命盘概览
十神深度探索
赋能行动手册
报告能在前端单一长页面清晰展示。
提供报告文本复制功能。
基本的加载提示和错误提示。
实现无数据存储的隐私策略。
6. 未来考虑 (Future Considerations)

6.1 功能扩展:
合盘功能（例如，爱情、友情、事业伙伴匹配度分析）。
流年、大运分析模块。
用户账户系统，允许用户保存历史报告（需重新评估数据隐私策略）。
更丰富的报告导出/分享选项（如优化PDF、一键分享到社交媒体）。
6.2 用户体验优化:
更具交互性的报告解读。
根据用户反馈迭代报告内容和AI提示词。
6.3 商业化:
基于NewAPI，探索更精细化的服务套餐或付费功能（例如，更深度的分析模块、无限次报告生成等），可通过项目所有者运营的网店销售API Key或服务。

7. 技术实现方案 (Technical Implementation Details)

7.1 系统架构回顾:
如前所述，系统主要由前端应用、一个轻量级的后端服务（负责八字计算并作为调用AI的代理）、NewAPI服务以及Flowith API构成。核心原则是保持后端简单，前端负责用户交互和大部分视图逻辑。

7.2 前端开发 (Frontend Development):

7.2.1 技术栈推荐:
HTML, CSS, JavaScript: Web开发的基础。
JavaScript框架/库 (可选其一):
Vue.js: 渐进式框架，上手相对容易，有丰富的生态。适合构建交互性较强的单页应用(SPA)。
React: 流行的声明式UI库，组件化思想，生态庞大。
Svelte: 编译器，将组件编译为高效的命令式代码，包体小，性能好。
纯原生JavaScript: 如果UI交互非常简单，也可以不使用框架，但组件化管理和状态管理会相对麻烦。
CSS框架 (可选): Tailwind CSS, Bootstrap, or Element Plus / Ant Design Vue (如果用Vue/React) 等，可以加速UI开发并保证一致性。
7.2.2 关键UI组件实现:
生日/时辰选择器:
可以使用框架自带的日期选择组件，或引入轻量级的第三方日期/时间选择库。
年份、月份、日期下拉菜单通过JavaScript动态生成和验证（例如，确保2月不会有30号）。
时辰下拉菜单包含十二时辰及其对应的24小时范围。
报告展示区:
一个可滚动的<div>容器，内部按顺序排列三个报告板块的文本内容。
使用合适的HTML标签（如<h1>, <h2>, <p>, <ul>）来组织和格式化文本。
加载动画: 可以使用CSS动画或简单的GIF图片。
引导内容: 在加载时显示的静态文本或图片。
7.2.3 API交互 (与后端服务):
使用浏览器内置的 Workspace API 或更方便的库如 axios 来发送HTTP请求到后端服务。
请求: 发送用户选择的年、月、日、时辰信息 (JSON格式)。
响应: 接收后端返回的AI生成的报告内容 (JSON格式，包含三个板块的文本) 或错误信息。
异步处理API请求，更新UI状态（加载中、显示报告、显示错误）。
7.2.4 报告操作功能实现:
复制文本: 使用 navigator.clipboard.writeText() API 实现。可以为每个板块或整个报告提供复制按钮。
生成图片:
推荐使用 html2canvas JavaScript库。它可以将指定的HTML DOM元素（如报告区域）渲染成一个<canvas>元素，然后可以将其转换为图片数据URL，供用户下载。
const canvas = await html2canvas(document.getElementById('report-area'));
const imageUrl = canvas.toDataURL('image/png');
创建一个<a>标签并设置其href为imageUrl，download属性为文件名，然后模拟点击下载。
导出PDF:
客户端方案1 (jsPDF + html2canvas): 先用 html2canvas 将报告内容转为图片（或多张图片，如果内容过长），然后用 jsPDF 将这些图片嵌入到PDF中。
import jsPDF from 'jspdf';
const pdf = new jsPDF();
pdf.addImage(imageUrl, 'PNG', 0, 0, width, height);
pdf.save('bazi-report.pdf');
客户端方案2 (jsPDF 直接处理文本): 如果报告主要是文本，并且格式相对简单，可以直接使用 jsPDF 的文本添加功能。但这对于复杂布局和样式的还原度不如图片方案。
考虑报告内容的长度，可能需要分页处理。
7.3 后端开发 (BaZi Calculation & AI Orchestration Service):

7.3.1 技术栈推荐:
语言: Python 3.x
Web框架 (可选其一):
Flask: 轻量级WSGI Web应用框架，非常灵活，上手快，适合小型API服务。
FastAPI: 现代、快速（高性能）的Web框架，基于Starlette和Pydantic，自带数据校验和API文档（Swagger UI）。对于API开发非常友好。
7.3.2 API端点设计 (示例使用FastAPI):
Python

from fastapi import FastAPI
from pydantic import BaseModel
import bazi_calculator # 假设你将bazi.py封装或可导入
import requests # 用于调用NewAPI
import os

app = FastAPI()

NEWAPI_ENDPOINT = os.getenv("NEWAPI_ENDPOINT") # e.g., "https://your-newapi-domain.com/v1/chat/completions"
NEWAPI_KEY = os.getenv("OWNER_NEWAPI_KEY") # 你（项目方）的NewAPI Key或直接是Flowith Key

class BirthInfo(BaseModel):
    year: int
    month: int
    day: int
    hour_index: int # 0 for 子时, 1 for 丑时, etc.

@app.post("/generate_report")
async def generate_report_endpoint(birth_info: BirthInfo):
    try:
        # 1. 八字排盘
        # 假设bazi_calculator.get_bazi_details返回一个包含八字信息的字典
        bazi_data = bazi_calculator.get_bazi_details(
            birth_info.year,
            birth_info.month,
            birth_info.day,
            birth_info.hour_index # 你需要将十二时辰索引转为bazi.py接受的格式
        )

        # 2. 构建调用Flowith的Prompts (这里仅为示例结构)
        prompts = {
            "overview": f"请基于以下八字信息：{bazi_data}，生成八字命盘概览。",
            "ten_gods": f"请基于以下八字信息：{bazi_data}，进行十神深度探索。",
            "action_manual": f"请基于以下八字信息：{bazi_data}，提供赋能行动手册。"
        }

        report_sections = {}
        headers = {
            "Authorization": f"Bearer {NEWAPI_KEY}",
            "Content-Type": "application/json"
        }

        # 3. 分别调用AI生成各板块内容 (或一次性调用，取决于你的Prompt设计和Flowith能力)
        for section, prompt_text in prompts.items():
            payload = {
                "model": "flowith-model-name", # 在NewAPI中配置的指向Flowith的模型名
                "messages": [{"role": "user", "content": prompt_text}]
                # 根据Flowith API的具体格式调整payload
            }
            response = requests.post(NEWAPI_ENDPOINT, json=payload, headers=headers, timeout=300) # 5分钟超时
            response.raise_for_status() # 如果HTTP错误则抛出异常
            report_sections[section] = response.json()["choices"][0]["message"]["content"]

        return {"success": True, "report": report_sections}

    except requests.exceptions.RequestException as e:
        # Log error e
        return {"success": False, "error": "AI服务调用失败，请稍后再试。"}
    except Exception as e:
        # Log error e
        return {"success": False, "error": "报告生成过程中发生内部错误。"}
7.3.3 bazi.py 集成:
将 bazi.py 脚本放在项目目录下，或者将其核心功能封装成一个可导入的Python模块 (bazi_calculator.py)。
后端服务在接收到前端请求后，调用此模块中的函数进行八字计算。
7.3.4 调用NewAPI/Flowith:
使用Python的 requests 库发送POST请求到你部署的NewAPI服务地址。
API Key管理: 将你（项目所有者）用于访问Flowith的API Key（或者通过NewAPI间接访问的Key）作为环境变量 (OWNER_NEWAPI_KEY) 配置在后端服务的运行环境中。严禁硬编码到代码中或暴露给前端。
请求体 (Payload) 包含AI模型标识（在NewAPI中配置的指向Flowith的模型）、以及你为各报告板块精心设计的提示词 (Prompts) 和从 bazi.py 获取的结构化八字数据。
设置合理的超时时间（例如5分钟，300秒）。
7.3.5 错误处理:
捕获bazi.py计算可能发生的错误。
捕获调用NewAPI/Flowith API时的网络错误、超时、HTTP错误等。
向前端返回结构化的错误信息，方便前端展示。
在服务器端记录详细错误日志。
7.4 NewAPI 服务配置:

你将自行部署和管理NewAPI实例。
核心配置:
在NewAPI中添加并配置一个或多个“渠道”，使其指向你的Flowith API端点。
配置相应的模型名称（例如，你在后端代码中 payload 里使用的 flowith-model-name）。
将你拥有的Flowith API的真实凭证安全地配置在NewAPI的渠道设置中。
NewAPI将作为你的后端服务与Flowith API之间的安全代理和凭证管理器。
（未来商业化）: 如果你想通过网店销售API Key让用户使用你的AI命理工具，NewAPI可以帮助你生成和管理这些Key的额度。但MVP阶段，你的后端服务将使用一个你（项目方）自己的、有足够额度的Key来调用NewAPI。
7.5 数据流总结:

前端: 用户选择年月日时 -> JS对象。
前端 -> 后端: JS对象 (JSON) 发送给 /generate_report。
后端:
接收JSON -> Python对象。
调用 bazi.py -> 结构化八字数据 (Python字典/对象)。
结合八字数据和预设模板 -> 生成Prompts (字符串)。
调用 requests.post (携带Prompts和Owner's API Key) -> NewAPI。
NewAPI: 验证/代理 -> Flowith API。
Flowith API: 处理请求 -> 生成的文本。
Flowith API -> NewAPI -> 后端: AI生成的文本 (JSON响应)。
后端 -> 前端: 包含各板块报告文本的JSON响应。
前端: 解析JSON -> 在HTML中渲染报告。
7.6 部署注意事项:

前端: 可以部署为静态网站（例如，使用GitHub Pages, Netlify, Vercel, 或传统Web服务器如Nginx）。
后端服务 (Python Flask/FastAPI):
Docker: 将后端应用打包成Docker镜像，方便部署到任何支持Docker的平台。
PaaS (Platform as a Service): Heroku, Google App Engine, AWS Elastic Beanstalk等。
Serverless Functions: AWS Lambda, Google Cloud Functions。对于Flask/FastAPI应用，可以使用Mangum (AWS Lambda) 或类似适配器。这对于轻量级API非常经济高效。
VPS (Virtual Private Server): 自己管理服务器并部署应用。
NewAPI: 根据其官方文档进行部署，通常也是Docker部署。
环境变量: 确保所有敏感配置（API Keys, NewAPI端点）都通过环境变量注入，而不是硬编码。
7.7 关键库/工具概览:

前端:
JavaScript 框架/库 (Vue, React, Svelte - 任选)
axios (可选,用于HTTP请求)
html2canvas (用于生成图片)
jsPDF (用于生成PDF)
后端:
Python
Flask 或 FastAPI
requests (用于调用外部API)
bazi.py (或其封装)
其他:
NewAPI (自行部署)
Docker (推荐用于部署)